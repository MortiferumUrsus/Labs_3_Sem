Файл Array_sequence.h: 
#ifndef ARRAY_SEQUENCE_H
#define ARRAY_SEQUENCE_H

#include "sequence.h"
#include <stdexcept>

// Класс последовательности на основе массива
template<typename T>
class ArraySequence : public Sequence<T> {
private:
    T* data; // Динамический массив данных
    int length; // Длина последовательности

    void is_index(int index){
        if (index < 0 || index >= length) {
            throw std::out_of_range("Index out of range in ArraySequence::set");
        }
    }

public:
    // Конструктор с заданным размером
    ArraySequence(int size) : length(size), data(new T[size]) {}

    // Конструктор копирования
    ArraySequence(const ArraySequence<T>& other) : length(other.get_length()), data(new T[other.get_length()]) {
        for (int i = 0; i < length; ++i) {
            data[i] = other.get(i);
        }
    }

    // Деструктор
    ~ArraySequence() {
        delete[] data;
    }

    // Получить элемент по индексу
    T get(int index) const override {
        is_index(index);
        return data[index];
    }

    // Установить элемент по индексу
    void set(int index, T value) override {
        is_index(index);
        data[index] = value;
    }

    // Получить длину последовательности
    int get_length() const override {
        return length;
    }

    // Клонировать последовательность
    Sequence<T>* clone() const override {
        return new ArraySequence<T>(*this);
    }
};

#endif // ARRAY_SEQUENCE_H
Файл isorter.h:
#ifndef ISORTER_H
#define ISORTER_H

#include "sequence.h"

// Интерфейс сортировщика
template<typename T>
class ISorter {
public:
    // Виртуальная функция сортировки
    virtual Sequence<T>* sort(const Sequence<T>& seq, int (*cmp)(const T&, const T&)) = 0; /// Переделать на конст ссылку
    virtual ~ISorter() = default; // Виртуальный деструктор
};

#endif // ISORTER_H
Файл InsertionSorter.h: 
#ifndef INSERTION_SORTER_H
#define INSERTION_SORTER_H

#include "isorter.h"

// Класс сортировщика методом простых вставок
template<typename T>
class InsertionSorter : public ISorter<T> {
public:
    // Функция сортировки
    Sequence<T> sort(Sequence<T>* seq, int (*cmp)(const T&, const T&)) override {
        int n = seq->get_length();
        Sequence<T>* sorted_seq = seq->clone(); // Клонирование последовательности

        for (int i = 1; i < n; ++i) {
            T key = sorted_seq->get(i);
            int j = i - 1;
            while (j >= 0 && cmp(sorted_seq->get(j), key) > 0) {
                sorted_seq->set(j + 1, sorted_seq->get(j));
                j = j - 1;
            }
            sorted_seq->set(j + 1, key);
        }

        return sorted_seq;
    }
};

#endif // INSERTION_SORTER_H


Файл BinaryInsertionSorter.h:
#ifndef BINARY_INSERTION_SORTER_H
#define BINARY_INSERTION_SORTER_H

#include "isorter.h"

// Класс сортировщика методом двоичных вставок
template<typename T>
class BinaryInsertionSorter : public ISorter<T> {
public:
    // Функция сортировки
    Sequence<T>* sort(Sequence<T>* seq, int (*cmp)(const T&, const T&)) override {
        int n = seq->get_length();
        Sequence<T>* sorted_seq = seq->clone();

        for (int i = 1; i < n; ++i) {
            T key = sorted_seq->get(i);
            int left = 0;
            int right = i - 1;

            // Бинарный поиск позиции для вставки
            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (cmp(key, sorted_seq->get(mid)) < 0) {
                    right = mid -1;
                }
                else {
                    left = mid + 1;
                }
            }
            // Сдвиг элементов для вставки ключа
            for (int j = i - 1; j >= left; --j) {
                sorted_seq->set(j + 1, sorted_seq->get(j));
            }
            sorted_seq->set(left, key);
        }
        return sorted_seq;
    }
};

#endif // BINARY_INSERTION_SORTER_H

Файл ShakerSorter.h:
#ifndef SHAKER_SORTER_H
#define SHAKER_SORTER_H

#include "isorter.h"

// Класс шейкерной сортировки
template<typename T>
class ShakerSorter : public ISorter<T> {
public:
    // Функция сортировки
    Sequence<T>* sort(Sequence<T>* seq, int (*cmp)(const T&, const T&)) override {
        Sequence<T>* sorted_seq = seq->clone();
        int left = 0;
        int right = sorted_seq->get_length() - 1;
        while (left <= right) {
            for (int i = left; i < right; ++i) {
                if (cmp(sorted_seq->get(i), sorted_seq->get(i + 1)) > 0) {
                    T temp = sorted_seq->get(i);
                    sorted_seq->set(i, sorted_seq->get(i +1));
                    sorted_seq->set(i + 1, temp);
                }
            }
            right--;
            for (int i = right; i > left; --i) {
                if (cmp(sorted_seq->get(i -1), sorted_seq->get(i)) > 0) {
                    T temp = sorted_seq->get(i);
                    sorted_seq->set(i, sorted_seq->get(i -1));
                    sorted_seq->set(i -1, temp);
                }
            }
            left++;
        }
        return sorted_seq;
    }
};

#endif // SHAKER_SORTER_H

Файл ui.cpp: 
#include <iostream>
#include <string>
#include "smrt_ptr.h"
#include "sequence.h"
#include "array_sequence.h"
#include "data_structure.h"
#include "data_generator.h"
#include "isorter.h"
#include "insertion_sorter.h"
#include "binary_insertion_sorter.h"
#include "shaker_sorter.h"
#include "comparator.h"
#include <chrono>

void start() {
    int data_size = 10000; // Размер данных по умолчанию
    Sequence<Person>* data = nullptr; // Указатель на данные
    int algorithm_choice = 1; // Выбранный алгоритм сортировки
    int comparator_choice = 1; // Выбранный компаратор

    while (true) {
        // Вывод меню
        std::cout << "Menu: \n";
        std::cout << "1. Select sorting algorithm (current: ";
        switch (algorithm_choice) {
            case 1: std::cout << "Insertion Sort"; break;
            case 2: std::cout << "Binary Insertion Sort"; break;
            case 3: std::cout << "Shaker Sort"; break;
            default: std::cout << "Unknown"; break;
        }
        std::cout << ")\n";
        std::cout << "2. Select sorting criteria (current: ";
        switch (comparator_choice) {
            case 1: std::cout << "First Name"; break;
            case 2: std::cout << "Last Name"; break;
            case 3: std::cout << "Height"; break;
            case 4: std::cout << "Weight"; break;
            case 5: std::cout << "Year of Birth"; break;
            case 6: std::cout << "Gender"; break;
            default: std::cout << "Unknown"; break;
        }
        std::cout << ")\n";
        std::cout << "3. Set data size (current: " << data_size << ")\n";
        std::cout << "4. Generate data\n";
        std::cout << "5. Sort data and measure time\n";
        std::cout << "6. View data\n";
        std::cout << "7. Exit\n";
        std::cout << "Choose an option: ";

        int choice;
        std::cin >> choice;

        if (choice == 1) {
            // Выбор алгоритма сортировки
            std::cout << "Select sorting algorithm:\n";
            std::cout << "1. Insertion Sort\n";
            std::cout << "2. Binary Insertion Sort\n";
            std::cout << "3. Shaker Sort\n";
            std::cin >> algorithm_choice;
        } else if (choice == 2) {
            // Выбор критерия сортировки
            std::cout << "Select sorting criteria:\n";
            std::cout << "1. First Name\n";
            std::cout << "2. Last Name\n";
            std::cout << "3. Height\n";
            std::cout << "4. Weight\n";
            std::cout << "5. Year of Birth\n";
            std::cout << "6. Gender\n";
            std::cin >> comparator_choice;
        } else if (choice == 3) {
            // Установка размера данных
            std::cout << "Enter data size: ";
            std::cin >> data_size;
        } else if (choice == 4) {
            // Генерация данных
            if (data) delete data;
            data = generate_data(data_size);
            std::cout << "Data generated.\n";
        } else if (choice == 5) {
            if (!data) {
                std::cout << "No data to sort. Generate data first.\n";
                continue;
            }
            // Создание сортировщика на основе выбора пользователя
            ISorter<Person>* sorter = nullptr;
            switch (algorithm_choice) {
                case 1:
                    sorter = new InsertionSorter<Person>();
                    break;
                case 2:
                    sorter = new BinaryInsertionSorter<Person>();
                    break;
                case 3:
                    sorter = new ShakerSorter<Person>();
                    break;
                default:
                    std::cout << "Invalid algorithm choice.\n";
                    continue;
            }

            // Выбор функции сравнения на основе выбора пользователя
            int (*comparator)(const Person&, const Person&) = nullptr;
            switch (comparator_choice) {
                case 1:
                    comparator = compare_by_first_name;
                    break;
                case 2:
                    comparator = compare_by_last_name;
                    break;
                case 3:
                    comparator = compare_by_height;
                    break;
                case 4:
                    comparator = compare_by_weight;
                    break;
                case 5:
                    comparator = compare_by_year_of_birth;
                    break;
                case 6:
                    comparator = compare_by_gender;
                    break;
                default:
                    std::cout << "Invalid comparator choice.\n";
                    continue;
            }

            std::cout << "Sorting...\n";
            // Измерение времени сортировки
            auto start = std::chrono::high_resolution_clock::now();
            Sequence<Person>* sorted_data = sorter->sort(data, comparator);
            auto end = std::chrono::high_resolution_clock::now();
            std::chrono::duration<double, std::milli> elapsed = end - start;
            std::cout << "Sorting completed in " << elapsed.count() << " milliseconds.\n";

            // Очистка памяти
            delete sorted_data;
            delete sorter;

        } else if (choice == 6) {
            // Вывод данных на экран
            if (!data) {
                std::cout << "No data to view. Generate data first.\n";
                continue;
            }
            int length = data->get_length();
            for (int i = 0; i < length; ++i) {
                Person p = data->get(i);
                std::cout << p.first_name << " " << p.last_name << ", Year: " << p.year_of_birth
                          << ", Height: " << p.height << ", Weight: " << p.weight << ", Gender: " 
                          << p.gender << "\n""\n";
                if (i >= 100) {
                    std::cout << "... (data truncated)\n";
                    break;
                }
            }
        } else if (choice == 7) {
            // Выход из программы
            break;
        } else {
            std::cout << "Invalid choice.\n";
        }
    }

    // Освобождение памяти
    if (data) delete data;

}